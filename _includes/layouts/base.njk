<!doctype html>
<html lang="{{ metadata.language }}">
	{% set siteThemeConfig = site.theme or {} %}
	{% set configuredDefaultThemeId = siteThemeConfig.defaultId %}
	{% set defaultTheme = themes | first %}
	{% if configuredDefaultThemeId %}
		{% for theme in themes %}
			{% if theme.id == configuredDefaultThemeId %}
				{% set defaultTheme = theme %}
			{% endif %}
		{% endfor %}
	{% endif %}
	{% set defaultThemeClasses = defaultTheme.classes | join(' ') %}
	{% set defaultThemeMidtoneClass = defaultTheme.midtoneClass if defaultTheme.midtoneClass is defined else 'mid-gray' %}
	{% set previewResetDelay = siteThemeConfig.previewResetDelay if siteThemeConfig.previewResetDelay is defined else 200 %}
	{% set transitionDuration = siteThemeConfig.transitionDuration if siteThemeConfig.transitionDuration is defined else '0.35s' %}
	{% set transitionTimingFunction = siteThemeConfig.transitionTimingFunction if siteThemeConfig.transitionTimingFunction is defined else 'ease' %}
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ site.title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

		{#- Uncomment this if youâ€™d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

			<link rel="stylesheet" href="https://unpkg.com/tachyons@4.12.0/css/tachyons.min.css"/>
			<style>
				body.theme {
					transition: background-color {{ transitionDuration }} {{ transitionTimingFunction }}, color {{ transitionDuration }} {{ transitionTimingFunction }};
				}
				body.theme .theme-text,
				body.theme a,
				body.theme [data-theme-preview] span {
					transition: color {{ transitionDuration }} {{ transitionTimingFunction }}, background-color {{ transitionDuration }} {{ transitionTimingFunction }};
				}
				body.theme .theme-midtone {
					transition: color {{ transitionDuration }} {{ transitionTimingFunction }};
				}
			</style>
	</head>
	<body class="theme {{ defaultThemeClasses }}" data-theme="{{ defaultTheme.id }}" data-default-theme="{{ defaultTheme.id }}">
		<main>
			{{ content | safe }}
		</main>

	<script>
		(function() {
			const themeConfig = {{ themes | dump | safe }};
			const themeTarget = document.body;
			const themeMap = themeConfig.reduce((map, theme) => {
				map[theme.id] = theme.classes;
				return map;
			}, {});
			const defaultMidtoneClass = {{ defaultThemeMidtoneClass | dump | safe }};
			const themeMidtoneMap = themeConfig.reduce((map, theme) => {
				const className = theme.midtoneClass || defaultMidtoneClass;
				map[theme.id] = className;
				return map;
			}, {});
			const allThemeClasses = Array.from(new Set(themeConfig.flatMap(theme => theme.classes)));
			const allMidtoneClasses = Array.from(new Set([
				defaultMidtoneClass,
				...Object.values(themeMidtoneMap)
			])).filter(Boolean);
			const storageKey = 'theme';
			const previewResetDelay = {{ previewResetDelay }};
			let activeTheme = themeTarget.dataset.theme;
			let previewButtons = [];
			let previewResetTimeout;

			function updateActivePreview(id) {
				if (!previewButtons.length) return;
				previewButtons.forEach(button => {
					const isActive = button.dataset.themePreview === id;
					if (isActive) {
						button.setAttribute('data-active', '');
					} else {
						button.removeAttribute('data-active');
					}
					button.classList.toggle('b--black-80', isActive);
					button.classList.toggle('o-60', !isActive);
					button.setAttribute('aria-pressed', String(isActive));
				});
			}

			function clearPreviewReset() {
				if (!previewResetTimeout) return;
				clearTimeout(previewResetTimeout);
				previewResetTimeout = undefined;
			}

			function schedulePreviewReset() {
				clearPreviewReset();
				previewResetTimeout = setTimeout(() => {
					applyTheme(activeTheme, { persist: false, syncSelect: true, preview: true });
				}, previewResetDelay);
			}

			function applyTheme(id, options = {}) {
				if (!themeMap[id]) return;
				const { persist = true, syncSelect = true, preview = false } = options;
				themeTarget.classList.remove(...allThemeClasses);
				themeTarget.classList.add(...themeMap[id]);
				themeTarget.dataset.theme = id;
				const midtoneClass = themeMidtoneMap[id] || defaultMidtoneClass;
				if (allMidtoneClasses.length) {
					document.querySelectorAll('.theme-midtone').forEach(element => {
						element.classList.remove(...allMidtoneClasses);
						if (midtoneClass) element.classList.add(midtoneClass);
					});
				}
				if (!preview) {
					activeTheme = id;
					updateActivePreview(id);
					if (persist) {
						try {
							localStorage.setItem(storageKey, id);
						} catch (error) {
							/* localStorage may be unavailable; ignore persistence */
						}
					}
				}
				if (syncSelect) {
					document.querySelectorAll('[data-theme-select]').forEach(select => {
						if (select.value !== id) select.value = id;
					});
				}
			}

			function previewTheme(id) {
				clearPreviewReset();
				applyTheme(id, { persist: false, syncSelect: false, preview: true });
			}

			function cancelPreview(event) {
				if (event && event.relatedTarget && event.relatedTarget.closest && event.relatedTarget.closest('[data-theme-preview]')) {
					return;
				}
				schedulePreviewReset();
			}

			function initTheme() {
				let initial = themeTarget.dataset.defaultTheme;
				try {
					const stored = localStorage.getItem(storageKey);
					if (stored && themeMap[stored]) {
						initial = stored;
					}
				} catch (error) {
					/* ignore storage issues and fall back to default */
				}
				applyTheme(initial, { persist: false, syncSelect: false });
			}

			applyTheme(activeTheme, { persist: false, syncSelect: false, preview: true });

			document.addEventListener('DOMContentLoaded', () => {
				initTheme();
				const themeSelects = document.querySelectorAll('[data-theme-select]');
				themeSelects.forEach(select => {
					if (!themeMap[select.value]) {
						select.value = themeTarget.dataset.theme;
					}
					select.addEventListener('change', event => {
						applyTheme(event.target.value);
					});
				});

				const supportsPointer = 'PointerEvent' in window;
				previewButtons = Array.from(document.querySelectorAll('[data-theme-preview]'));
				previewButtons.forEach(button => {
					const themeId = button.dataset.themePreview;
					const enterEvent = supportsPointer ? 'pointerenter' : 'mouseenter';
					const leaveEvent = supportsPointer ? 'pointerleave' : 'mouseleave';
					button.addEventListener(enterEvent, () => previewTheme(themeId));
					button.addEventListener(leaveEvent, cancelPreview);
					button.addEventListener('focus', () => previewTheme(themeId));
					button.addEventListener('blur', cancelPreview);
					button.addEventListener('click', () => {
						clearPreviewReset();
						applyTheme(themeId);
					});
				});

				updateActivePreview(themeTarget.dataset.theme);
			});
		})();
	</script>
	</body>
</html>
